{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","owner","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","handleChange","event","target","name","value","className","action","onSubmit","preventDefault","trim","uuidv4","htmlFor","type","placeholder","onChange","id","cols","rows","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","React","citas","guardarCitas","useEffect","setItem","stringify","citasRestantes","filter","titulo","length","Fragment","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a60c103.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n  // Crear State de Citas\r\n  const [ cita, actualizarCita ] = useState({\r\n    mascota: \"\",\r\n    owner: \"\",\r\n    fecha: \"\",\r\n    hora: \"\",\r\n    sintomas: \"\"\r\n  });\r\n\r\n  const [ error, actualizarError ] = useState(false);\r\n\r\n  // Funcion que se ejectura cada que el usuario escribe en un input\r\n  const handleChange = (event) => {\r\n    actualizarCita({\r\n      ...cita,\r\n      [event.target.name]: event.target.value \r\n    })\r\n  }\r\n\r\n  // Extraer los valores\r\n  const { mascota, owner, fecha, hora, sintomas } = cita;\r\n\r\n  // Cuando el usuario presiona Agregar cita\r\n  const submitCita = (event) => {\r\n    event.preventDefault();\r\n    \r\n    // Validación de campos vacíos para formularios\r\n    if(mascota.trim() === \"\" || owner.trim() === \"\" || fecha.trim() === \"\" || hora.trim() === \"\" || sintomas.trim() === \"\") {\r\n      actualizarError(true);\r\n      return;\r\n    }\r\n\r\n    //Eliminar el mensaje previo\r\n    actualizarError(false);\r\n\r\n    // Asignar un ID\r\n    cita[\"id\"] = uuidv4();\r\n\r\n    // Crear la cita\r\n    crearCita(cita);\r\n\r\n    // Reiniciar el form\r\n    actualizarCita({\r\n      mascota: \"\",\r\n      owner: \"\",\r\n      fecha: \"\",\r\n      hora: \"\",\r\n      sintomas: \"\"\r\n    })\r\n\r\n  }\r\n\r\n  return(\r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n\r\n      { error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null }\r\n\r\n      <form\r\n        action=\"\"\r\n        onSubmit={submitCita}\r\n        >\r\n        <label htmlFor=\"\">Nombre Mascota</label>\r\n        <input \r\n          type=\"text\"\r\n          name=\"mascota\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Mascota\"\r\n          onChange={handleChange}\r\n          value={mascota}\r\n        />\r\n        \r\n        <label htmlFor=\"\">Nombre del dueño</label>\r\n        <input \r\n          type=\"text\"\r\n          name=\"owner\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre del dueño\"\r\n          onChange={handleChange}\r\n          value={owner}\r\n        />\r\n        \r\n        <label htmlFor=\"\">Fecha</label>\r\n        <input \r\n          type=\"date\"\r\n          name=\"fecha\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={fecha}\r\n        />\r\n        \r\n        <label htmlFor=\"\">Hora</label>\r\n        <input \r\n          type=\"time\"\r\n          name=\"hora\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={hora}\r\n        />\r\n        \r\n        <label htmlFor=\"\">Sintomas</label>\r\n        <textarea name=\"sintomas\" id=\"\" cols=\"30\" rows=\"10\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={sintomas}\r\n        ></textarea>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className=\"u-full-width button-primary\"\r\n        >\r\n          Agregar Cita\r\n        </button>\r\n        \r\n      </form>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nFormulario.propTypes = {\r\n  crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n  <div className=\"cita\">\r\n    <p>Mascota: <span>{cita.mascota}</span></p>\r\n    <p>Dueño: <span>{cita.owner}</span></p>\r\n    <p>Fecha: <span>{cita.fecha}</span></p>\r\n    <p>Hora: <span>{cita.hora}</span></p>\r\n    <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n\r\n    <button\r\n      className=\"button eliminar u-full-width\"\r\n      onClick={() => eliminarCita(cita.id)}\r\n    >Eliminar &times;\r\n    </button>\r\n  </div>\r\n);\r\n\r\nCita.propTypes = {\r\n  cita: PropTypes.object.isRequired,\r\n  eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\nexport default Cita;","// import logo from './logo.svg';\n// import './App.css';\nimport React from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n  // Citas en localStorage\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  // Arreglo citas\n  const [ citas, guardarCitas ] = React.useState(citasIniciales);\n\n  // Use Effect para realizar ciertas operaciones cuando el state cambia\n  React.useEffect(() => {\n    if(citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas, citasIniciales]);\n\n  //  Funcion que tome las citas actuales y agregue la nueva\n  const crearCita = (cita) => {\n    guardarCitas([\n      ...citas,\n      cita\n    ])\n  }\n  \n  // Funcion que elimina una cita por su ID\n  const eliminarCita = (id) => {\n    const citasRestantes = citas.filter(cita => cita.id !== id);\n    guardarCitas(citasRestantes);\n  }\n\n  // Mensaje condicional para el titulo\n  const titulo = citas.length === 0 ? \"No hay citas programadas\" : \"Citas Programadas\"\n\n  return (\n    <React.Fragment>\n      <h1>Administrador de citas</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            { citas.map(cita => (\n              <Cita \n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}